<?php

/**
 * @file
 * Defines a Field API field for time.
 */

/**
 * Implements hook_theme().
 */
function timefield_theme() {

  return array(
    'timefield_formatter' => array(
      'variables' => array('time' => NULL, 'settings' => NULL),
      'template' => 'timefield',
      'path' => drupal_get_path('module', 'timefield') . '/theme',
    ),
  );
}

/**
 * Implements hook_field_info()
 */
function timefield_field_info() {
  $fields = array();

  $fields['timefield'] = array(
    'label' => t('Time Field'),
    'description' => t('A field type for storing times, with an optional end time.'),
    'settings' => array(
      'totime' => '',
      'input_format' => 'g:i a',
    ),
    'instance_settings' => array(),
    'default_widget' => 'timefield_standard',
    'default_formatter' => 'timefield_default',
    'property_type' => 'timefield',
    'property_callbacks' => array('timefield_property_info_callback'),
  );

  return $fields;
}
/**
 * Implements hook_field_settings_form().
 */
function timefield_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['totime'] = array(
    '#type' => 'select',
    '#title' => t('To Time'),
    '#options' => array('' => t('Never'), 'optional' => t('Optional'), 'required' => t('Required')),
    '#description' => t('Should this field include an end time.'),
    '#default_value' => $settings['totime'],
    '#disabled' => $has_data,
  );
  $form['input_format'] = array(
      '#title' => t('Time Input Format'),
      '#type' => 'select',
      '#options' => _timefield_display_options(),
      '#default_value' => $settings['input_format'],
      '#required' => TRUE,
    );

  return $form;
}

/**
 * Implements hook_field_widget_info()
 */
function timefield_field_widget_info() {
  $widgets = array();

  $widgets['timefield_standard'] = array(
    'label' => t('Time Field'),
    'description' => t('Input Form for a Time Field'),
    'field types' => array('timefield'),
    'settings' => array(
      'label_position' => 'above',
    ),
  );

  return $widgets;

}

/**
 * Implements hook_field_formatter_info().
 */
function timefield_field_formatter_info() {
  return array(
    'timefield_default' => array(
      'label' => t('Default'),
      'field types' => array('timefield'),
      'settings' => array(
        'display_format' => 'g:i a',
      ),
    ),
  );
}

/**
 * validate callback for the timefield element
 * @param $element
 * @param $form_state
 * @param $form
 */
function timefield_time_validate($element, &$form_state, $form) {

  $delta = $element['#delta']; // TODO: Isn't there a better way to find out which element?
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta];
    $new_values = array();

    // If empty, set to null
    if (strlen($values['value']) == 0) {
      form_set_value($element, array('value' => NULL), $form_state);
      return;
    }
    $date_value = date_parse($values['value']);
    if ($date_value['error_count']) {
      form_error($element['value'], t('The time is not in a format that I understand.'));
    }
    else {
      $parsed_value = timefield_time_to_integer($values['value']);
      $new_values['value'] = $parsed_value;
    }

    $date_value2 = date_parse($values['value2']);
    if ($date_value2['error_count']) {
      form_error($element['value2'], t('The to time is not in a format that I understand.'));
    }
    else {
      $parsed_value = timefield_time_to_integer($values['value2']);
      if ($values['value'] > $parsed_value || $parsed_value == 0) {
        $parsed_value += 86400;
      }
      $new_values['value2'] = $parsed_value;
    }


    form_set_value($element, $new_values, $form_state);

  }
}


/**
 * Implements hook_field_validate().
 */
function timefield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!is_int($item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'timefield_invalid',
          'message' => t('Time values are incorrect.'),
        );
      }
    }
    if (!empty($item['value2'])) {
      if (!is_int($item['value2'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'timefield_invalid',
          'message' => t('Time values are incorrect.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function timefield_field_is_empty($item, $field) {
  // Every timefield must have at least single time value or it is considered empty
  return (strlen($item['value']) == 0);
}

/**
 * Implements hook_field_formatter_view().
 */
function timefield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'timefield_default':
      foreach ($items as $delta => $item) {

        $element[$delta] = array(
          '#theme' => array('timefield_formatter'),
          '#time' => $item,
          '#settings' => $settings,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_form()
 */
function timefield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $settings = $field['settings'];

  $element += array(
    '#delta' => $delta,
  );

  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  if ($settings['totime'] == 'required' || $settings['totime'] == 'optional') {
    $value2 = isset($items[$delta]['value2']) ? $items[$delta]['value2'] : '';
  }


  switch ($instance['widget']['type']) {
    case 'timefield_standard':

      // We don't want to add our settings more than once
      static $settings_set = FALSE;
      $js_settings = array();

      if (!$settings_set) {
        $js_settings = _timefield_js_settings($settings['input_format']);
        $settings_set = TRUE;
      }

      $element += array(
        '#title' => 'Time',
        '#type' => 'fieldset',
        '#delta' => $delta,
        '#attached' => array(
          // Add javascript to trigger the timepicker jquery extension.
          'js' => array(
            drupal_get_path('module', 'timefield') . '/js/jquery.ui.timepicker.js',
            drupal_get_path('module', 'timefield') . '/js/timefield.js',
            array(
              'data' => array('timefield' => $js_settings),
              'type' => 'setting',
            ),
          ),
          'css' => array(
            drupal_get_path('module', 'timefield') . '/css/jquery-ui-timepicker.css'
          ),
        ),
        '#element_validate' => array('timefield_time_validate'),
      );

      $element['value'] = array(
        '#title' => t('Time'),
        '#description' => t('Enter a time value, in any format'),
        '#type' => 'textfield',
        '#default_value' => timefield_integer_to_time($settings['input_format'], $value),
        '#size' => 15,
        '#maxlength' => 15,
        '#suffix' => '<div class="field-timefield-picker"></div>',
        '#attributes' => array('class' => array('edit-field-timefield-picker')),

      );

      // Add second element if totime is required or optional
      if ($settings['totime'] == 'required' || $settings['totime'] == 'optional') {
        $element['value2'] = array(
          '#title' => t('End Time'),
          '#description' => t('Enter a time value, in any format'),
          '#type' => 'textfield',
          '#default_value' => timefield_integer_to_time($settings['input_format'], $value2),
          '#size' => 15,
          '#maxlength' => 15,
          '#suffix' => '<div class="field-timefield-picker"></div>',
          '#attributes' => array('class' => array('edit-field-timefield-picker-2')),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function timefield_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'timefield_default') {
    $element['display_format'] = array(
      '#title' => t('Time Display Format'),
      '#type' => 'select',
      '#options' => _timefield_display_options(),
      '#default_value' => $settings['display_format'],
      '#required' => TRUE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function timefield_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  return t('Current Format') . ': ' . _timefield_display_options($settings['display_format']);

}

/**
 * Preprocess function for the timefield formatter.
 */
function template_preprocess_timefield_formatter(&$variables) {

  // Encode the time elements.
  $variables['time']['value'] = check_plain($variables['time']['value']);
  $variables['time']['formatted_value'] = trim(timefield_integer_to_time($variables['settings']['display_format'], $variables['time']['value']));
  $variables['time']['time'] = $variables['time']['formatted_value'];
  if (isset($variables['time']['value2'])) {
    $variables['time']['value2'] = check_plain($variables['time']['value2']);
    $variables['time']['formatted_value2'] = trim(timefield_integer_to_time($variables['settings']['display_format'], $variables['time']['value2']));
    $variables['time']['time'] .= ' - ' . $variables['time']['formatted_value2'];
  }
}

/**
 * Callback to alter the property info of time fields.
 *
 * @see timefield_field_info().
 */
function timefield_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];
  $property['type'] = ($field['cardinality'] != 1) ? 'list<timefield>' : 'timefield';
  $property['getter callback'] = 'timefield_property_verbatim_get';
  $property['setter callback'] = 'timefield_property_verbatim_set';
  $property['property info']['value'] = array(
    'label' => t('The integer value of the first time value'),
    'description' => t('The integer value of the first time value'),
    'type' => 'timefield',
    'getter callback' => 'timefield_property_verbatim_get',
    'setter callback' => 'timefield_property_verbatim_set',
  );
  $property['property info']['value2'] = array(
    'label' => t('The integer value of the second time value'),
    'description' => t('The integer value of the second time value'),
    'type' => 'timefield',
    'getter callback' => 'timefield_property_verbatim_get',
    'setter callback' => 'timefield_property_verbatim_set',
  );

  unset($property['setter callback']);
  unset($property['query callback']);
}

/**
 * Gets the property just as it is set in the data.
 */
function timefield_property_verbatim_get($data, array $options, $name) {

  if ((is_array($data) || (is_object($data) && $data instanceof ArrayAccess)) && isset($data[$name])) {
    return $data[$name];
  }
  elseif (is_object($data) && isset($data->$name)) {
    return $data->$name;
  }
  return NULL;
}

/**
 * Sets the property to the given value. May be used as 'setter callback'.
 */
function timefield_property_verbatim_set(&$data, $name, $value) {

  if (is_array($data) || (is_object($data) && $data instanceof ArrayAccess)) {
    $data[$name] = $value;
  }
  elseif (is_object($data)) {
    $data->$name = $value;
  }
}

/**
 * helper function to return time value from integer
 * @param $format
 * the php date format
 * @param $value
 * the integer value to be converted
 */
function timefield_integer_to_time($format, $value) {
  if (!strlen($value) == 0) {
    if ($value >= 86400) {
      $value = $value - 86400;
    }
     return date($format, mktime(0, 0, $value));
  }
  else {
    return '';
  }
}

/**
 * Helper function to return interer value from time format
 * @param $value
 * time format that should be parsable via date_parse().
 */
function timefield_time_to_integer($value) {
  $time = date_parse($value);
  $output = 0;
  if ($time['error_count'] == 0) {
    $output += $time['hour'] * 60 * 60;
    $output += $time['minute'] * 60;
    $output += $time['second'] ;
    return $output;
  }
  else {
    return 0;
  }
}

/**
 * We manually enumerate time values, since there aren't that many permutations
 * @param $current_option
 * optional parameter that will return the string description of the current format
 * If no parameter is provided, an array of all possible values are returned
 */
function _timefield_display_options($current_option = NULL) {

  $values = array(
    'g:i a' => date('g:i a', time()) . ' -- ' . t('12-hour format, hours without leading zeros'),
    'h:i a' => date('h:i a', time()) . ' -- ' . t('12-hour format, hours with leading zeros'),
    'H:i' => date('H:i', time()) . ' -- ' . t('24-hour format, hours with leading zeros'),
    'G:i' => date('G:i', time()) . ' -- ' . t('24-hour format, hours without leading zeros'),
    'g:i A' => date('g:i A', time()) . ' -- ' . t('12-hour format, hours without leading zeros'),
    'h:i A' => date('h:i A', time()) . ' -- ' . t('12-hour format, hours with leading zeros'),
  );

  if (is_null($current_option)) {
    return $values;
  }
  else {
    return $values[$current_option];
  }
}

/**
 * helper function to return settings usable for the jquery.timepicker.js library
 * @param $settings
 * The currentlt defined display settings, in PHP date() format.
 */
function _timefield_js_settings($settings) {

  $js_settings = array(
    'timeSeparator' => ':',
  );

  switch ($settings) {
    case 'g:i a':
      $js_settings += array(
        'showLeadingZero' => FALSE,
        'showPeriod' => TRUE, //AM PM
        'showPeriodLabels' => TRUE,
        'amPmText' => array("am", "pm"),
      );
      break;
    case 'h:i a':
      $js_settings += array(
        'showLeadingZero' => TRUE,
        'showPeriod' => TRUE, //AM PM
        'showPeriodLabels' => FALSE,
        'amPmText' => array("am", "pm"),
      );
      break;
    case 'H:i':
      $js_settings += array(
        'showLeadingZero' => TRUE,
        'showPeriod' => FALSE, //AM PM, 24 hour
        'showPeriodLabels' => TRUE,
      );
      break;
    case 'G:i':
      $js_settings += array(
        'showLeadingZero' => TRUE,
        'showPeriod' => FALSE, //AM PM
        'showPeriodLabels' => TRUE,
      );
      break;
    case 'g:i A':
      $js_settings += array(
        'showLeadingZero' => FALSE,
        'showPeriod' => TRUE, //AM PM
        'showPeriodLabels' => TRUE,
        'amPmText' => array("AM", "PM"),
      );
      break;
    case 'h:i A':
      $js_settings += array(
        'showLeadingZero' => TRUE,
        'showPeriod' => TRUE, //AM PM
        'showPeriodLabels' => TRUE,
        'amPmText' => array("AM", "PM"),
      );
      break;
  }

  return $js_settings;
}
